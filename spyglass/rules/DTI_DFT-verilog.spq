// Pre-synthesis checks
-verilog
-policies=openmore,lint,morelint,erc,dft,spyglass
-overloadrules=CombLoop+severity=Error
-overloadrules=WRN_48+severity=Error
-overloadrules=UndrivenOutPort-ML+severity=Error
-overloadrules=UndrivenInTerm-ML+severity=Error
-overloadrules=UndrivenNet-ML+severity=Error
-overloadrules=HangingInstInput-ML+severity=Error
-overloadrules=HangingInst-ML+severity=Error
-overloadrules=NoMixedSynch+severity=Warning
-overloadrules=NoRealFunc-ML+severity=Error
-overloadrules=RedundantLogicalOp-ML+severity=Warning
-overloadrules=W110+severity=Error
-overloadrules=W112+severity=Error
-overloadrules=W154+severity=Error
-overloadrules=W167+severity=Error
-overloadrules=W18+severity=Error
-overloadrules=W182a+severity=Error
#-overloadrules=W182b+severity=Error
-overloadrules=W182c+severity=Error
#obs#-overloadrules=W182f+severity=Error
-overloadrules=W182g+severity=Error
-overloadrules=W182h+severity=Error
#obs#-overloadrules=W182i+severity=Error
#obs#-overloadrules=W182j+severity=Error
-overloadrules=W182k+severity=Error
-overloadrules=W182n+severity=Error
-overloadrules=W188+severity=Error
-overloadrules=W189+severity=Error
-overloadrules=W20+severity=Error
-overloadrules=W21+severity=Error
-overloadrules=W208+severity=Error
-overloadrules=W210+severity=Error
-overloadrules=W213+severity=Error
-overloadrules=W218+severity=Error
-overloadrules=W238+severity=Error
-overloadrules=W239+severity=Warning
#obs#-overloadrules=W244+severity=Error
-overloadrules=W250+severity=Error
-overloadrules=W287a+severity=Error
-overloadrules=W287c+severity=Error
-overloadrules=W293+severity=Error
-overloadrules=W294+severity=Error
-overloadrules=W295+severity=Error
-overloadrules=W323+severity=Error
-overloadrules=W339a+severity=Warning
-overloadrules=W339b+severity=Error
-overloadrules=W345+severity=Error
-overloadrules=W346+severity=Error
-overloadrules=W348+severity=Error
-overloadrules=W422+severity=Error
-overloadrules=W43+severity=Error
-overloadrules=W415a+severity=Error
-overloadrules=W430+severity=Warning
-overloadrules=W442a+severity=Error
-overloadrules=W442b+severity=Error
-overloadrules=W442c+severity=Error
#obs#-overloadrules=W442e+severity=Error
-overloadrules=W442f+severity=Error
#obs#-overloadrules=W449+severity=Error
-overloadrules=W481a+severity=Error
-overloadrules=W481b+severity=Error
#-overloadrules=W482+severity=Error
-overloadrules=W505+severity=Error
#obs#-overloadrules=W510+severity=Warning
#obs#-overloadrules=W601+severity=Error
-overloadrules=W66+severity=Error
-overloadrules=badimplicitSM1+severity=Error
-overloadrules=badimplicitSM2+severity=Error
-overloadrules=badimplicitSM4+severity=Error
-overloadrules=bothedges+severity=Error
-overloadrules=infiniteloop+severity=Error
-overloadrules=mixedsenselist+severity=Error
#-overloadrules=nestedfunc+severity=Error
-overloadrules=nonstaticloop+severity=Error
#obsolete#-overloadrules=readclock+severity=Error
-overloadrules=repeatevent+severity=Error
#-overloadrules=taskloop+severity=Error
-overloadrules=SYNTH_5033+severity=Error
-overloadrules=checkMultipleDrivers+severity=Error
-overloadrules=checkIOPinConnectedToNet+severity=Warning
//-overloadrules=checkNetDriver+severity=Error
-overloadrules=FloatingInputs+severity=Error
-overloadrules=FlopClockUndriven+severity=Error
-overloadrules=FlopDataUndriven+severity=Error
-overloadrules=LatchEnableUndriven+severity=Error
-overloadrules=LatchDataUndriven+severity=Error
-overloadrules=AnalyzeBBox+severity=Error
-rules CombLoop	// Combinational loop exists
-rules WRN_48	// Port names should not be duplicated
-rules NoMixedSynch	// Do not mix synchronous and asynchronous logic in one module
-rules NoRealFunc-ML	// Functions of type real are not synthesizable
-rules RegOutputs	// Some outputs from a top module are not registered
-rules RedundantLogicalOp-ML	// Logical operation result is same as one of the operands or is a constant
-rules W110	// An instance port connection has incompatible width compared to the port definition
-rules W112	// Nested event controls may not be synthesizable
-rules W120	// A signal/variable has been declared but is not used
-rules W154	// Do not declare nets implicitly
-rules W167	// Module has no input or output ports
-rules W18	// Do not infer latches
-rules W182a	// Statement is not synthesizable
//-rules W182b	// Primitive declarations (UDPs) may not be synthesizable
-rules W182c	// time declarations are not synthesizable
#obso#-rules W182f	// Array of integer variables may not be synthesizable
-rules W182g	// tri0 declarations may not be synthesizable
-rules W182h	// tri1 declarations are not synthesizable
#obs#-rules W182i	// triand declarations may not be synthesizable
#obs#-rules W182j	// trior declarations may not be synthesizable
-rules W182k	// trireg declarations are not synthesizable
-rules W182n	// Switches such as cmos, pmos & nmos are not synthesizable
-rules W188	// Do not write to input ports
-rules W189	// Nested Synopsys translate_off comments
-rules W20	// Quasi-continuous assignments are not synthesizable
-rules W21	// Deassign statements are not synthesizable
-rules W208	// Nested Synopsys translate_on comments
-rules W210	// Number of connections made to an instance does not match number of ports on master
-rules W213	// PLI Task/Functions are not synthesizable
-rules W218	// Questionable event expression
-rules W238	// Mixing combinational and sequential styles
-rules W239	// Hierarchical references may not be synthesizable
#-rules W242	// A function is calling itself; i.e. it is recursive
#obs#-rules W244	// Shift by non-constant may be unsynthesizable
-rules W250	// The disable statement may not be synthesizable
-rules W287a	// Some inputs to instance are not driven or unconnected
-rules W287c	// Inout port of an instance is not connected
-rules W293	// A function(or procedure) returns a real value, which is unsynthesizable
-rules W294	// Real variables are unsynthesizable
-rules W295	// Event variables may not be synthesizable
-rules W323	// Multiply driven inout net
-rules W326	// Event variable appearing in a posedge/negedge expression
-rules W339a	// Case equal operator (===) and case not equal (!==) operators may not be synthesizable
-rules W339b	// The divisor (second operand) for '/' and '%' should be a power of two
-rules W345	// Presence of an event control in a task or procedure body may not be synthesizable
-rules W346	// Task may be unsynthesizable because it contains multiple event constrols
-rules W348	// Unspecified width for integer expression in a concatenation
-rules W422	// Unsynthesizable block/process: event control has more than one clock
#-rules W43	// Wait statements may not be synthesizable
-rules W415a  // Signal may be multiply assigned (beside initialization) in the same scope.
-rules W430	// The "initial" statement is not synthesizable
-rules W442a	// Reset sequence may not be synthesizable. First statement in block mustbe an if statement
-rules W442b	// Reset sequence may not be synthesizable. The reset condition is too complex
-rules W442c	// Reset sequence may not be synthesizable. Reset can only be modified by! or ~ in the if condition
#obs#-rules W442e	// The specified reset sequence may not be synthesizable. Trigger and test are inconsistent
-rules W442f	// The specified reset sequence may not be synthesizable. Only binary operator that canbe used in 'if' is ==
#obs#-rules W449	// An expression used as a clock may not be synthesizable
-rules W481a	// Unsynthesizable loop: step variable differs from variable used in condition
-rules W481b	// Unsynthesizable loop: step variable differs from variable used in initialization
//-rules W482	// Unsynthesizable for-loop - condition variable differs from initialization variable
-rules W505	// Value assigned inconsistently - may not be synthesizable
#obs#-rules W510	// Defparam statements may not be synthesizable
#obs#-rules W601	// Loop index modification inside loop is not synthesizable
-rules W66	// Unsynthesizable repeat loop because repeat expression is not constant
-rules badimplicitSM1	// Unsynthesizable modelling style for a sequential machine. Clock and reset cannot be inferred
-rules badimplicitSM2	// Unsynthesizable implicit state machine: states can only be updated on same clock phase
-rules badimplicitSM4	// Unsynthesizable implicit state machine: event control expression may not have more than one edge
-rules bothedges	// Using both edges of same variable in sensitivity list may be unsynthesizable
-rules infiniteloop	// While/forever loop has no break control
-rules mixedsenselist	// Mixed conditions in sensitivity list may not be synthesizable
//-rules nestedfunc	// Nested function call used inside a function may be unsynthesizable in some tools
-rules nonstaticloop	// Unsynthesizable FOR loop
#obsolete#-rules readclock	// Unsynthesizable implicit state machine: clock read inside always block
-rules repeatevent	// Repeat event control may not be synthesizable
#-rules taskloop	// Unsynthesizable forever loop used inside function/task
-rules SYNTH_5033	// Multiply driven net is converted to wired or
-rules UndrivenOutPort-ML	// Undriven but loaded output port of a module detected
-rules UndrivenInTerm-ML	// Undriven but loaded input terminal of an instance detected
-rules UndrivenNet-ML	// Undriven but loaded net is detected in the design
-rules HangingInstInput-ML	// Net connected to input port of instance is undriven
-rules HangingInst-ML	// Block is not connected
-rules checkMultipleDrivers	// Only tristate pins may be WORed (multiple drivers only allowed, if all driving pins are of type tristate).
-rules checkIOPinConnectedToNet	// Input pins and IO pins of cells must be connected to a net.
//-rules checkNetDriver	// Each internal net must have at least one driver.
-rules FloatingInputs	// Floating Input to a combinatorial gate
-rules FlopClockUndriven	// Flip-flop clock pin not driven
-rules FlopDataUndriven	// Flip-flop data pin not driven
-rules LatchEnableUndriven	// Latch enable pin not driven
-rules LatchDataUndriven	// Latch data pin not driven
-rules AnalyzeBBox // The AnalyzeBBox rule reports all modules whose interface or definition is missing.
// DFT Rules
-rules Scan_07  // No registered shift mode signals.
-rules Topology_07_rtl  // Do not use parallel drivers.
-rules Clock_06  // Only one clock port allowed for each block.
-rules dumpBlackBox  // Identify black-boxes in a design and dump corresponding 'scanwrap' constraints in a file.
-rules Diagnose_testmode  // Display instances that blocks testmode propagation.
-rules Diagnose_testclock  // Display instances that blocks testclock propagation.
-rules Info_unused  // Display faults having no effect on system function.
-rules Info_uncontrollable  // Show nets with imperfect controllability.
-rules Info_path  // Display blocked path information.
-rules Info_unobservable  // Show all unobservable pins
-rules Info_untestable  // Display untestable faults caused by test mode.
-rules Info_coverage  // Estimate fault and test coverage.
-rules Info_undetectCause  // Display undetectable fault information.
-rules Info_testmode  // Display testmode simulation results.
-rules Info_testclock  // Display test clock propagation.
//-rules Info_inferredNoScan  // Displays all flip-flops that have been inferred as noScan by Spyglass-DFT.
//-rules Info_scanchain  // Displays all properly stitched scanchains.
-rules Async_02_shift  // Flip-flop set or reset fanin cones must not contain flip-flops, latches or black-boxes in shift mode.
//-rules Async_04  // Do not use flip-flops with both asynchronous set AND reset.
-rules Async_05  // Only one unblocked path allowed from a primary input to a flip-flop set or reset pin.
-rules Async_06  // Set and reset lines on the same flip-flop should not be simultaneously active.
-rules Async_07  // Asynchronous sources should be inactive during shift mode.
-rules Async_08  // Testmode signals that only control asynchronous set or reset pins should be unrestricted during capture. Use -scanshift modifier to testmode signal.
//-rules BIST_01  // Restrict input cone width for BIST.
//-rules BIST_02  // Limit the number of gate inputs.
//-rules BIST_03  // X-state remains after initialization sequence.
//-rules Clock_01  // Only one clock is allowed and that clock must be driven from a top-level pin.
-rules Clock_02  // Do not switch on both edges of a clock.
//-rules Clock_03  // Report multiple clock domains.
-rules Clock_04  // Do not use clock signals as data signals.
//-rules Clock_05  // All opposite edge flip-flops must be used as retiming flip-flops.
-rules Clock_07  // Do not use data as clocks.
-rules Clock_08  // No "ANDing" of generated clocks.
-rules Clock_09  // No logic in common with clock and data.
//-rules Clock_10  // Each clock domain should have a dedicated test clock.
-rules Clock_11  // Internally generated clocks must be testclock controlled in shift mode.
//-rules Clock_13  // Paths crossing clock domains are not allowed.
//-rules Clock_14  // Negedge registers allowed on outputs only.
-rules Clock_16  // Flip-flops capturing on the falling (rising) edge must not have any data paths from flip-flops capturing on the rising (falling) edge of the same rtz (rto) clock source.
-rules Clock_17  // Capture clocks must not be gated by flip-flops capturing on the same clock.
//-rules Clock_18  // No negative edge flip-flops.
-rules Clock_21  // Clocks must not drive flip-flop set or reset pins.
-rules Latch_01  // Do not use latches unless transparent during power ground mode.
-rules Latch_02  // No combinational loops from transparent latches.
-rules Latch_04  // No synchronous latches.
-rules Latch_06  // Cascaded latches should have clock phase inversion.
-rules Latch_08  // Latches, except for retiming latches, should be transparent in capture mode.
-rules Latch_10  // All latch enables, except for retiming latches, must be combinationally derived from root level inputs.
//-rules RAM_01  // Memory shadow logic must be less than a user specified percentage.
//-rules RAM_02  // Memory outputs should be registered.
//-rules RAM_03  // Memory inputs should be scannable.
//-rules RAM_04  // Memory outputs must be forced to known values in shift mode.
//-rules RAM_05  // Disable RAM write enables.
//-rules RAM_06  // Top level pins must drive memory read/write pins.
//-rules RAM_07  // Memory outputs must not affect scannable flip-flops during capture.
//-rules Scan_06  // All scan chains should operate in parallel.
//-rules Scan_17  // Sequential depth must not exceed limit between any two scan points.
//-rules Scan_22  // Scan chains must have lockup latches at domain crossing.
//-rules Scan_23  // Module bypass conditions should be satisfied.
//-rules Scan_24  // All flip-flops should be part of some scan chain.
//-rules Scan_25  // Scan chains must not contain invertors in scan path.
//-rules Scan_26  // Scan chains must contain lockup latch at chain end.
//-rules Soc_01  // Expected node value must be achieved.
//-rules Soc_02  // Paths between user specified nodes must exist.
//-rules Soc_04  // Show system state for a given tag.
//-rules Soc_05  // Verify testmode and testclock constraints specified on lower level module.
//-rules Soc_01_Info  // Expected node value is achieved.
//-rules Soc_02_Info  // Connection between user specified nodes exists.
//-rules TA_05  // Show the test insertion points in the design.
-rules TA_06  // Generate testcoverage when all spyglass-dft suggested test points are selected.
//-rules Topology_01  // Combinational loops are not allowed.
-rules Topology_02  // No asynchronous pin to pin paths.
//-rules Topology_03  // Avoid sequentially derived asynchronous signals with common clock.
//-rules Topology_04  // No direct register to register connections.
-rules Topology_05  // Wire-OR and Wire-AND are not allowed.
-rules Topology_07_flat  // Do not use parallel drivers.
//-rules Topology_09  // No combinational re-convergent fanout.
//-rules Topology_10  // Avoid long logic paths.
//-rules Topology_11  // No combinational paths from a clock pin to a root level port in capture mode.
-rules Tristate_01  // Do not infer tristate components.
-rules Tristate_03  // Tri-state enables should be disabled during scan shifting.
-rules Tristate_04_shift  // Inout ports should be forced to outputs only in shift mode.
-rules Tristate_05  // Tristate buses should have a pull-up or pull-down connection.
-rules Tristate_06  // Tristate bus enables must be fully decoded so that exactly one driver is active at any time.
-rules Tristate_09  // Tri-state buses must be designed to prevent bus contention and floating during scan shift.
-rules Tristate_10  // Capture must not cause 1-hot bus contention.
-rules Tristate_11  // Only one tri-state enable should be active in shift mode.
-rules Tristate_12  // Bus enables should not be forced in shift mode.
-rules Tristate_13  // Generate bus width report.




